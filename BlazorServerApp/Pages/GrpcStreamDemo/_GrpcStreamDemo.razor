@using Grpc.Net.Client
@using GrpcDemoService
@page "/grpcstreamdemo"
@inject StreamDemo.StreamDemoClient streamClient

<PageTitle>gRPC stream demo</PageTitle>

<h3>gRPC stream demo</h3>
<button class="btn btn-primary" disabled=@f_loading @onclick=HandleReset>Reset</button>
<button class="btn btn-primary" disabled=@f_loading @onclick=HandleServerStreamDemo>Server stream</button>
<button class="btn btn-primary" disabled=@f_loading @onclick=HandleClientStreamDemo>Client stream</button>
<button class="btn btn-primary" disabled=@f_loading @onclick=HandleBidirectionStreamDemo>Bidirectional stream</button>

@if (errMsg != null)
{
  <div class="alert alert-danger my-3" role="alert">
    @errMsg
  </div>
}

@if (f_loading)
{
  <div class="progress">
    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 100%"></div>
  </div>
}

<h6>回應訊息</h6>
<ol>
  @foreach (string message in messageList)
  {
    <li>@message</li>
  }
</ol>

@code {
  bool f_loading = false;
  string? errMsg = null;
  List<string> messageList = new();

  Task HandleReset()
  {
    messageList.Clear();
    return Task.CompletedTask;
  }

  async Task HandleServerStreamDemo()
  {
    try
    {
      errMsg = null;
      f_loading = true;

      var reply = streamClient.ServerStreamDemo(new Test { Message = "測試" });
      while (await reply.ResponseStream.MoveNext(CancellationToken.None))
      {
        var msg = reply.ResponseStream.Current;
        messageList.Add($"收到訊息: {msg.Message}");
        StateHasChanged();
      }

      messageList.Add($"Server Streaming Completed.");
    }
    catch (Exception ex)
    {
      errMsg = $"出現例外！{ex.Message}";
    }
    finally
    {
      f_loading = false;
    }
  }

  async Task HandleClientStreamDemo()
  {
    try
    {
      errMsg = null;
      f_loading = true;
      Random randomDelay = new();

      var streamCaller = streamClient.ClientStreamDemo();

      for (int i = 1; i <= 10; i++)
      {
        await Task.Delay(randomDelay.Next(1, 2000)); // 稍等一下

        var msg = new Test { Message = $"Message {i}" };
        await streamCaller.RequestStream.WriteAsync(msg);

        messageList.Add($"送出訊息: {msg.Message}");
        await InvokeAsync(StateHasChanged);
      }

      await streamCaller.RequestStream.CompleteAsync(); // 必需通加已上傳完畢。
      messageList.Add($"Cimpleted Client Streaming.");

      var reply = await streamCaller.ResponseAsync;
      messageList.Add($"收到回應: {reply.Message}");
    }
    catch (Exception ex)
    {
      errMsg = $"出現例外！{ex.Message}";
    }
    finally
    {
      f_loading = false;
    }
  }

  async Task HandleBidirectionStreamDemo()
  {
    try
    {
      errMsg = null;
      f_loading = true;
      Random randomDelay = new();

      var streamCaller = streamClient.BidirectionStreamDemo();

      //## 先定義：負責收回回應資料片段工作
      var replyTask = Task.Run(async () =>
      {
        while (await streamCaller.ResponseStream.MoveNext(CancellationToken.None))
        {
          var replyMsg = streamCaller.ResponseStream.Current;
          messageList.Add($"收到訊息: {replyMsg.Message}");
          await InvokeAsync(StateHasChanged);
        }

        messageList.Add($"Server Streaming Completed.");
      });

      //## 再定義：負責上傳資料片段工作
      var reqTask = Task.Run(async () =>
      {
        for (int i = 1; i <= 10; i++)
        {
          await Task.Delay(randomDelay.Next(1, 2000)); // 稍等一下

          var reqMsg = new Test { Message = $"Message {i}" };
          await streamCaller.RequestStream.WriteAsync(reqMsg);

          messageList.Add($"送出訊息: {reqMsg.Message}");
          await InvokeAsync(StateHasChanged);
        }

        await streamCaller.RequestStream.CompleteAsync(); // 必需通加已上傳完畢。
        messageList.Add($"Cimpleted Client Streaming.");
      });

      await Task.WhenAll(reqTask, replyTask);
    }
    catch (Exception ex)
    {
      errMsg = $"出現例外！{ex.Message}";
    }
    finally
    {
      f_loading = false;
    }
  }
}
