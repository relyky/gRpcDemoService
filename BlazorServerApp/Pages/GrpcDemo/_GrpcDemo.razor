@using GrpcDemoService
@page "/grpcdemo"
@inject MyBizService bizSvc
@inject Product.ProductClient prodClient

<PageTitle>gRPC unary demo</PageTitle>

<h3>gRPC unary demo</h3>

<button class="btn btn-primary" @onclick=HandleHello>Hello</button>
<button class="btn btn-primary" @onclick=HandleGetFullName>Get fullname</button>
<button class="btn btn-primary" @onclick=HandleSaveProduct>Save product</button>
<button class="btn btn-primary" @onclick=HandleGetProductList>Get product list</button>

@if (f_loading)
{
  <div class="progress">
    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 100%"></div>
  </div>
}

@if (errMsg != null)
{
  <div class="alert alert-danger my-3" role="alert">
    @errMsg
  </div>
}

<pre>訊息: @helloReply?.Message</pre>
<pre>全名: @reply?.FullName</pre>
<pre>SaveReply: @($"{saveReply?.IsSuccessful} | {saveReply?.StatusCode}")</pre>

<h6>Product List Reply</h6>
@if (listReply != null)
{
  <ol>
    @foreach (var product in listReply.Products)
    {
      <li>@($"{product.ProductName} | {product.ProductCode} | {product.Price} | {product.StockDate} | {product.StockDate.ToDateTimeOffset().ToLocalTime()}")</li>
    }
  </ol>
}

@code {
  HelloReply? helloReply = null;
  ProductSaveReply? saveReply = null;
  ProductListReply? listReply = null;

  bool f_loading = false;
  string? errMsg = null;
  SampleReply? reply = null;

  async Task HandleHello()
  {
    helloReply = await bizSvc.HelloAsync(new HelloRequest { Name = $"郝聰明 at {DateTime.Now:HH:mm:ss}" });
  }

  async Task HandleGetFullName()
  {
    try
    {
      errMsg = null;
      f_loading = true;

      (reply, string msg) = await bizSvc.GetFullNameAsync(new SampleRequest { FirstName = "John", LastName = "Big" });

      // 邏輯錯誤
      //(reply, string msg) = await bizSvc.GetFullNameAsync(new SampleRequest { FirstName = "logical", LastName = "error" });

      // 例外處理
      //(reply, string msg) = await bizSvc.GetFullNameAsync(new SampleRequest { FirstName = "throw", LastName = "exception" });

      await Task.Delay(800);
      if (msg != Constant.Success) errMsg = msg;
    }
    catch (Exception ex)
    {
      errMsg = $"出現例外！{ex.Message}";
    }
    finally
    {
      f_loading = false;
    }
  }

  async Task HandleSaveProduct()
  {
    try
    {
      errMsg = null;
      f_loading = true;
      saveReply = await bizSvc.SaveProductAsync();
    }
    catch (Exception ex)
    {
      errMsg = $"出現例外！{ex.Message}";
    }
    finally
    {
      f_loading = false;
    }
  }

  async Task HandleGetProductList()
  {
    try
    {
      errMsg = null;
      f_loading = true;
      listReply = await bizSvc.GetProductListAsync();
    }
    catch (Exception ex)
    {
      errMsg = $"出現例外！{ex.Message}";
    }
    finally
    {
      f_loading = false;
    }
  }

}
